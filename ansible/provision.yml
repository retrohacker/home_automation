- name: Install common deps
  hosts: all
  remote_user: pi
  become: true
  tasks:
    - name: Install docker repository key
      apt_key:
        id: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"
        url: "https://download.docker.com/linux/debian/gpg"
        state: present
    - name: Install docker apt repository
      apt_repository:
        repo: "deb [arch=armhf] https://download.docker.com/linux/debian stretch stable"
        state: present
    - name: Update apt cache
      apt:
        update_cache: yes
    - name: "Install {{ item.name }}"
      apt:
        name: "{{ item.name }}"
      with_items:
        - { name: docker-ce }
        - { name: docker-ce-cli }
        - { name: containerd.io }
        - { name: rsync }
        - { name: python-pip }
        - { name: python-setuptools }
        - { name: virtualenv }
    - name: Add pi to docker group
      user:
        name: pi
        state: present
        groups: docker
        append: yes
    - name: Install docker-py
      pip:
        name: docker-py

- name: Copy configs
  hosts: all
  remote_user: pi
  tasks:
    - name: Copy project files
      synchronize:
        archive: no
        checksum: yes
        delete: yes
        recursive: yes
        perms: yes
        src: ../../
        dest: ./home_automation

- name: Setup NannyCam
  hosts: nannycam
  remote_user: pi
  tasks:
    - name: Build motion image
      docker_image:
        name: nannycam
        tag: motion
        force: yes
        dockerfile: NannyCam.Motion.Dockerfile
        path: ./home_automation/docker
    - name: Build nginx image
      docker_image:
        name: nannycam
        tag: nginx
        force: yes
        dockerfile: NannyCam.Nginx.Dockerfile
        path: ./home_automation/docker
    - name: Create state directory
      become: true
      file:
        path: /state/nannycam
        owner: pi
        group: pi
        state: directory
    - name: Start motion image
      docker_container:
        name: nannycam-motion
        image: nannycam:motion
        privileged: yes
        restart_policy: always
        ports:
          - "8081:8081"
        volumes:
          - "./home_automation/config/nannycam-motion:/config:ro"
          - "/state/nannycam:/state"
        devices:
          - "/dev/vchiq"
    - name: Start nginx
      docker_container:
        name: nannycam-nginx
        image: nannycam:nginx
        restart_policy: always
        ports:
          - "8080:80"
        volumes:
          - "/state/nannycam:/usr/share/nginx/html:ro"

- name: Setup MediaServer
  hosts: mediaserver
  become: true
  remote_user: pi
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
    - name: Install emby
      apt:
        deb: https://github.com/MediaBrowser/Emby.Releases/releases/download/4.0.2.0/emby-server-deb_4.0.2.0_armhf.deb
    - name: "Install {{ item.name }}"
      apt:
        name: "{{ item.name }}"
      with_items:
        - { name: nginx }
        - { name: letsencrypt }
        - { name: apache2-utils }
    - name: create letsencrypt directory
      file: name=/var/www/letsencrypt state=directory
    - name: Remove default nginx config
      file: name=/etc/nginx/sites-enabled/default state=absent
    - name: Install system nginx config
      template:
        src: ../config/mediaserver-nginx/nginx.conf
        dest: /etc/nginx/nginx.conf
    - name: Install nginx site for letsencrypt requests
      template:
        src: ../config/mediaserver-nginx/http.conf
        dest: /etc/nginx/sites-enabled/http
    - name: Reload nginx to activate letsencrypt site
      service: name=nginx state=restarted
    - name: Create letsencrypt certificate
      shell: letsencrypt certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }}
      args:
        creates: /etc/letsencrypt/live/{{ domain_name }}
    - name: Generate dhparams
      shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
      args:
        creates: /etc/nginx/dhparams.pem
    - name: Install nginx site for specified site
      template:
        src: ../config/mediaserver-nginx/le.conf
        dest: /etc/nginx/sites-enabled/le
    - name: Reload nginx to activate specified site
      service: name=nginx state=restarted
    - name: Add letsencrypt cronjob for cert renewal
      cron:
        name: letsencrypt_renewal
        special_time: weekly
        job: letsencrypt --renew certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }} && service nginx reload
